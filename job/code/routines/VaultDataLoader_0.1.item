package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class VaultDataLoader {

	/*
	 * This function will read data from XML document returned by vault_data_loader job and inject this data into the context.
	 * All data key are prefixed with 'vault_'. 
	 * 
	 * {Category} vault
	 * {param} ContextProperties context : context needed to set context variable
	 * {param} routines.system.Document doc : XML document returned by vault_data_loader job which contains data to inject into context
	 * 
	 * {example} VaultDataLoader.loadDataIntoContext(context, input_row.data)
	 */
	public static void loadDataIntoContext(Object context, routines.system.Document doc) {

		java.util.List<org.dom4j.Node> dataNodes = doc.getDocument().selectNodes("/data/*");

		for (org.dom4j.Node data : dataNodes){

			try {
				
				java.lang.reflect.Field field = context.getClass().getField("vault_" + data.getName());
				if (field != null){
					field.set(context, data.getStringValue());
				}
				
			} catch (NoSuchFieldException e) {
				System.err.println("Field 'vault_" + data.getName() + "' is not defined in context. Ignored.");
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
		}

	}
	
}
